syntax = "proto3";

package flight;

import "google/protobuf/timestamp.proto";
import "operation.proto";

option go_package = "github.com/Dagosu/BookingApp/datatypes";

enum ViewSortOrder {
    VIEW_SORT_ORDER_UNSPECIFIED = 0;
    ASC = 1;
    DESC = 2;
}

message Review {
    string user_name = 1;
    string text = 2;
}

message Flight {
    string id = 1;
    string departure = 2;
    google.protobuf.Timestamp departure_time = 3;
    string arrival = 4;
    google.protobuf.Timestamp arrival_time = 5;
    int32 total_seats = 6;
    int32 bookable_seats = 7;
    string airline = 8;
    float price = 9;
    string status  = 10;
    repeated Review reviews = 11;
}

message FlightListRequest {
    // limit is used to only show a specified number of documents
    int32 limit = 1;
    // offset is used to skip a specified number of documents
    int32 offset = 2;
    // query is the query parameter used for free text search
    string query = 3;
    // sorts suports sorting by multiple SortParam parameters
    repeated SortParam sorts = 4;
    // filter support filtering by multiple FilterParam parameters
    repeated FilterParam filter = 5;
}

message FlightListResponse {
    Flight flight = 1;
    repeated Flight flights = 2;
    // operation_type for current message
    operation.OperationType operation_type = 3;
}

// SortParam represents the sort query
message SortParam {
    // field is the field path we want to sort 
    string field = 1;
    // order is the order direction we want to sort the field
    ViewSortOrder order = 2;
}

// FilterParam represents the filter query
message FilterParam {
    // condition is the type of filter (and, or)
    string condition = 1;
    // field is the field path we want to filter
    string field = 2;
    // operator is the type of filter (accepted values: eq, ne, lt, gt, lte,
    // gte, contains, begins, ends, pastX, nextX, relativePastX, relativeNextX)
    string operator = 3;
    // value is the value of the field we want to search against
    string value = 4;
}

message GetFlightRequest {
    string flight_id = 1;
}

message GetFlightResponse {
    Flight flight = 1;
}

message WriteReviewRequest {
    string flight_id = 1;
    string user_id = 2;
    string text = 3;
}

message WriteReviewResponse {
    Flight flight = 1;
}

service FlightService {
    rpc FlightList(FlightListRequest) returns (stream FlightListResponse);
    rpc GetFlight(GetFlightRequest) returns (GetFlightResponse);
    rpc WriteReview(WriteReviewRequest) returns (WriteReviewResponse);
}
