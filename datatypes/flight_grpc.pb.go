// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: flight.proto

package datatypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightServiceClient is the client API for FlightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightServiceClient interface {
	FlightList(ctx context.Context, in *FlightListRequest, opts ...grpc.CallOption) (FlightService_FlightListClient, error)
	GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error)
	WriteReview(ctx context.Context, in *WriteReviewRequest, opts ...grpc.CallOption) (*WriteReviewResponse, error)
}

type flightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightServiceClient(cc grpc.ClientConnInterface) FlightServiceClient {
	return &flightServiceClient{cc}
}

func (c *flightServiceClient) FlightList(ctx context.Context, in *FlightListRequest, opts ...grpc.CallOption) (FlightService_FlightListClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlightService_ServiceDesc.Streams[0], "/flight.FlightService/FlightList", opts...)
	if err != nil {
		return nil, err
	}
	x := &flightServiceFlightListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlightService_FlightListClient interface {
	Recv() (*FlightListResponse, error)
	grpc.ClientStream
}

type flightServiceFlightListClient struct {
	grpc.ClientStream
}

func (x *flightServiceFlightListClient) Recv() (*FlightListResponse, error) {
	m := new(FlightListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flightServiceClient) GetFlight(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error) {
	out := new(GetFlightResponse)
	err := c.cc.Invoke(ctx, "/flight.FlightService/GetFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) WriteReview(ctx context.Context, in *WriteReviewRequest, opts ...grpc.CallOption) (*WriteReviewResponse, error) {
	out := new(WriteReviewResponse)
	err := c.cc.Invoke(ctx, "/flight.FlightService/WriteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightServiceServer is the server API for FlightService service.
// All implementations should embed UnimplementedFlightServiceServer
// for forward compatibility
type FlightServiceServer interface {
	FlightList(*FlightListRequest, FlightService_FlightListServer) error
	GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error)
	WriteReview(context.Context, *WriteReviewRequest) (*WriteReviewResponse, error)
}

// UnimplementedFlightServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlightServiceServer struct {
}

func (UnimplementedFlightServiceServer) FlightList(*FlightListRequest, FlightService_FlightListServer) error {
	return status.Errorf(codes.Unimplemented, "method FlightList not implemented")
}
func (UnimplementedFlightServiceServer) GetFlight(context.Context, *GetFlightRequest) (*GetFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightServiceServer) WriteReview(context.Context, *WriteReviewRequest) (*WriteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteReview not implemented")
}

// UnsafeFlightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightServiceServer will
// result in compilation errors.
type UnsafeFlightServiceServer interface {
	mustEmbedUnimplementedFlightServiceServer()
}

func RegisterFlightServiceServer(s grpc.ServiceRegistrar, srv FlightServiceServer) {
	s.RegisterService(&FlightService_ServiceDesc, srv)
}

func _FlightService_FlightList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlightListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlightServiceServer).FlightList(m, &flightServiceFlightListServer{stream})
}

type FlightService_FlightListServer interface {
	Send(*FlightListResponse) error
	grpc.ServerStream
}

type flightServiceFlightListServer struct {
	grpc.ServerStream
}

func (x *flightServiceFlightListServer) Send(m *FlightListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlightService_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight.FlightService/GetFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetFlight(ctx, req.(*GetFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_WriteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).WriteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight.FlightService/WriteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).WriteReview(ctx, req.(*WriteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightService_ServiceDesc is the grpc.ServiceDesc for FlightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flight.FlightService",
	HandlerType: (*FlightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlight",
			Handler:    _FlightService_GetFlight_Handler,
		},
		{
			MethodName: "WriteReview",
			Handler:    _FlightService_WriteReview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FlightList",
			Handler:       _FlightService_FlightList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flight.proto",
}
